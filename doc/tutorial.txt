Getting Started
===============

In order to start using gladius, you will need to add a new script tag to your
web page:

<script src="gladius.js"></script>

We should also make a canvas on the page:

<canvas id="test-canvas" width="320" height="240">
</canvas>

Once this script is loaded you will have access to the gladius object. Now you
should create an engine instance:

gladius.create(
	{
		services: {
			graphics: {
				src: 'graphics/service',
				options: {
					canvas: document.getElementById( "test-canvas" )
				}
			}
		}
	},
	game
);

Engine instances are constructed asynchronously and your callback, game, will
be invoked, with the engine instance as a parameter, when the engine is ready.
Your game callback function should look like this:

function game( engine ) {
  ...
}

Engine Instance
===============

Once you have access to an engine instance you can build the pieces of your
simulation. Start by creating a new space:

var space = new engine.core.Space();

A space manages a collection of entities. Entities represent game objects in
your simulation. Let's create one (a cube) and add it to the space:

var cube = new engine.core.Entity({ name: 'MyCube' });
space.add( cube );

Every entity may have a name that allows it to be found in the space. An entity
isn't very interesting unless it has some components. Components carry data and
logic for a particular aspect of a simulation, like graphics or physics. Let's
add some graphics to our cube.

Resources
=========

We will need a mesh and a material. The engine instance has an API for
loading resources, and we can use it to produce a mesh and a material using
an external script:

var resources = {};
engine.core.resource.get(
	[
    	{
    		load: engine.core.resource.proceduralLoad,
    	    url: 'procedural-mesh.js',
        	type: engine.graphics.resource.Mesh,
            onsuccess: function( mesh ) {
                resources.mesh = mesh;
            },
            onfailure: function( error ) {
            }
        },
        {
            load: engine.core.resource.proceduralLoad,
            url: 'procedural-material.js',
        	type: engine.graphics.resource.Material,            
            onsuccess: function( material ) {
                resources.material = material;
            },
            onfailure: function( error ) {
            }
		}
	],
    {
        oncomplete: run
    }
);
function run() {
   ...
};

The engine's resource loader allows your simulation to fetch a collection of
resources and execute a callback for each load, as well as a final callback
when all the loads have completed. The load parameter specifies the method for
fetching the raw data. In this case we will procedurally generate the data. The
url parameter is passed to the load method. For this method the url is the
script we will run. The type parameter gives a constructor to invoke with the
raw data. In this case we are making a mesh and a material, so those are the
constructors we give.

Finally, onsuccess is invoked when the whole process is complete and it receives
a resource instance of the expected type. In the code above, we capture the
instances so we can use them later. The last callback, oncomplete, is invoked
when all the resources have been loaded. We can call run() when all our
resources have loaded and finish setting up the simulation.

Graphics
========

In order to add graphics to the cube entity, we will need to add a transform
component and a model component. The transform holds data about the cube's
position, rotation and scale. The model will store the mesh and material we
want to use.

cube.add( new engine.core.component.Transform({
	rotation: math.Vector3( 1, 2, 3 )
});

The code above will create a new transform with an initial rotation of [1, 2, 3]
radians. Now we can add a new model to the entity:

cube.add( new engine.graphics.component.Model({
	mesh: resources.mesh,
	material: resources.material
});

We need to add a camera to the space in order to render the simulation. We need
a second entity to represent the camera:

var camera = new engine.core.Entity({
	name: 'Mycamera',
	components: [
		new engine.core.component.Transform({
			position: math.Vector3( 0, 0, 2 )
		}),
		new engine.graphics.component.Camera({
			active: true,
            width: 320,
            height: 240
        }),
        new engine.graphics.component.Light()
	]
});
space.add( camera );
camera.target = cube.find( 'Transform' ).position;

Notice that the camera also requires a transform. The width and height
parameters should match the dimensions of the test canvas we created earlier.
The fov parameter sets the field of view. We also added a light to the camera
so that the cube is properly lit when it's rendered.

Finally, notice that we offset the camera from the origin by setting its
position, and we set its target to point at the position of the cube.

Putting it all together
=======================

Now that we've set up our simulation, we need to start the engine:

engine.run();

Doing this will start the scheduler, which is responsible for running scheduled
tasks each frame in the correct order. In this simulation, the graphics service
has a task that runs and is responsible for rendering the simulation to the
canvas. A more complicated simulation would have tasks to handle input, physics,
sound, and other simulation elements.

Below is the entire program:

<!DOCTYPE html>
<html>

<head>
	<script src='gladius.js'>
	</script>
	<script>
		document.addEventListener("DOMContentLoaded", function( event ) {
			function game( engine ) {
				var math = engine.math;
				
				var space = new engine.core.Space();
				
				var cube = new engine.core.Entity({ name: 'MyCube' });
				space.add( cube );
				
				var resources = {};
				engine.core.resource.get(
					[
    					{
    						load: engine.core.resource.proceduralLoad,
    	    				url: 'procedural-mesh.js',
        					type: engine.graphics.resource.Mesh,
            				onsuccess: function( mesh ) {
                				resources.mesh = mesh;
            				},
            				onfailure: function( error ) {
                    		}
        				},
        				{
           					load: engine.core.resource.proceduralLoad,
            				url: 'procedural-material.js',
        					type: engine.graphics.resource.Material,            
            				onsuccess: function( material ) {
                				resources.material = material;
            				},
            				onfailure: function( error ) {
                    		}
						}
					],
    				{
        				oncomplete: run
    				}
				);
				
				function run() {
					cube.add( new engine.core.component.Transform({
						rotation: math.Vector3( 1, 2, 3 )
					}));
					cube.add( new engine.graphics.component.Model({
						mesh: resources.mesh,
						material: resources.material
					}));
					
					var camera = new engine.core.Entity({
						name: 'Mycamera',
						components: [
							new engine.core.component.Transform({
								position: math.Vector3( 0, 0, 2 )
							}),
							new engine.graphics.component.Camera({
								active: true,
            					width: 320,
            					height: 240
        					}),
        					new engine.graphics.component.Light()
						]
					});
					
					space.add( camera );
					camera.target = cube.find( 'Transform' ).position;
					
					engine.run();
				};
			};
		
			var testCanvas = document.getElementById( "test-canvas" );
			gladius.create(
				{
					services: {
						graphics: {
							src: 'graphics/service',
							options: {
								canvas: testCanvas
							}
						}
				}
				},
				game
			);
		});
	</script>
</head>
<body>
	<canvas id="test-canvas" width="320" height="240">
	</canvas>
</body>

</html>